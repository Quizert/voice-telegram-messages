package handler

import (
	"bytes"
	"errors"
	"fmt"
	"go.uber.org/zap"
	"gopkg.in/telebot.v3"
	"kursach/defs"
	pb "kursach/proto"
	"os/exec"
	"strconv"
	"strings"
)

type Service interface {
	SendAudio(userID int64, text string) (*pb.ProcessingResponse, error)
	SaveModel(userID int64, fileInfo string, token string, modelName string) error

	SetPendingModel(userID int64, name string) error
	GetModelName(userID int64) (string, error)

	GetUserState(userID int64) (string, error)
	SetUserState(userID int64, state string) error

	GetUserModels(userID int64) ([]string, error)

	CountModels(userID int64) (int, error)

	DeleteModel(userID int64, modelName string) error
}

type Handler struct {
	service Service
	log     *zap.Logger
}

func NewHandler(service Service, logger *zap.Logger) *Handler {
	return &Handler{
		service: service,
		log:     logger,
	}
}

func (h *Handler) HandleText(c telebot.Context) error {
	userID := c.Sender().ID
	h.log.Info("HandleText called", zap.Int64("userID", userID))

	state, err := h.service.GetUserState(userID)
	if err != nil {
		h.log.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
		return c.Send("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
	}
	h.log.Info("User state retrieved", zap.String("state", state))

	switch state {
	case defs.WaitingModelName:
		modelName := c.Text()
		if modelName == "" {
			return c.Send("–ò–º—è –º–æ–¥–µ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
		}

		models, err := h.service.GetUserModels(userID)
		if err != nil {
			h.log.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
			return c.Send("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
		}

		for _, model := range models {
			if modelName == model {
				return c.Send("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –º–æ–¥–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º.")
			}
		}

		err = h.service.SetPendingModel(userID, modelName)
		if err != nil {
			h.log.Error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PendingModel", zap.Error(err))
			return c.Send("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
		}

		err = h.service.SetUserState(userID, defs.WaitingVoice)
		if err != nil {
			h.log.Error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
			return c.Send("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
		}

		h.log.Info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∏–º—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏", zap.String("modelName", modelName))
		return c.Send("–ü—Ä–∏—à–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏.")

	case defs.WaitingDeleteModelName:
		modelName := c.Text()
		if modelName == "" {
			return c.Send("–ò–º—è –º–æ–¥–µ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
		}

		models, err := h.service.GetUserModels(userID)
		if err != nil {
			h.log.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", zap.Error(err))
			return c.Send("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
		}

		found := false
		for _, model := range models {
			if modelName == model {
				found = true
				break
			}
		}

		if !found {
			return c.Send("–ú–æ–¥–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		}

		err = h.service.DeleteModel(userID, modelName)
		if err != nil {
			h.log.Error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏", zap.Error(err))
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏.")
		}

		h.log.Info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", zap.String("modelName", modelName))
		_ = h.service.SetUserState(userID, defs.FreeState)
		return c.Send("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")

	default:
		text := c.Text()
		audioRes, err := h.service.SendAudio(userID, text)
		if err != nil {
			if errors.Is(err, defs.ErrNoModel{}) {
				return c.Send("–°–æ–∑–¥–∞–π –º–æ–¥–µ–ª—å /save_model –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö /choose_model.")
			}
			h.log.Error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ", zap.Error(err))
			return c.Send("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
		}

		ogg, dur, err := EnsureVoiceNOTE(audioRes.Result.ProcessedAudio)
		if err != nil {
			h.log.Error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∞—É–¥–∏–æ", zap.Error(err))
			return c.Send("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
		}

		voiceMsg := &telebot.Voice{
			File: telebot.File{
				FileReader: bytes.NewReader(ogg),
			},
			MIME:     "audio/ogg",
			Duration: dur,
		}

		h.log.Info("–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", zap.Int64("userID", userID))
		return c.Send(voiceMsg)
	}
}

func (h *Handler) HandleVoice(c telebot.Context) error {
	userID := c.Sender().ID
	h.log.Info("HandleVoice called", zap.Int64("userID", userID))

	state, err := h.service.GetUserState(userID)
	if err != nil {
		h.log.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
		return c.Send("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
	}

	if state != defs.WaitingVoice {
		return c.Send("–Ø –Ω–µ –∂–¥—É –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –°–æ—Ö—Ä–∞–Ω–∏ –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ /save_model")
	}

	modelName, err := h.service.GetModelName(userID)
	if err != nil {
		h.log.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏", zap.Error(err))
		return c.Send("–ò–º—è –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
	}
	h.log.Info("–ü–æ–ª—É—á–µ–Ω–æ –∏–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", zap.String("modelName", modelName))

	fileInfo, err := c.Bot().FileByID(c.Message().Voice.FileID)
	if err != nil {
		h.log.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ ID", zap.Error(err))
		return c.Send("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
	}

	err = h.service.SaveModel(userID, fileInfo.FilePath, c.Bot().Token, modelName)
	if err != nil {
		h.log.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏", zap.Error(err))
		return c.Send("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
	}

	err = h.service.SetUserState(userID, defs.FreeState)
	if err != nil {
		h.log.Error("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
		return c.Send("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
	}

	h.log.Info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", zap.Int64("userID", userID))
	return c.Send("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
}

func (h *Handler) GetModelName(c telebot.Context) error {
	userID := c.Sender().ID
	h.log.Info("GetModelName called", zap.Int64("userID", userID))

	command := c.Message().Text

	switch command {
	case "/save_model":
		count, err := h.service.CountModels(userID)
		if err != nil {
			h.log.Error("–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ –º–æ–¥–µ–ª–µ–π", zap.Error(err))
			return c.Send("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
		}
		if count >= defs.MaxModels {
			return c.Send("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π.")
		}
		err = h.service.SetUserState(userID, defs.WaitingModelName)
		if err != nil {
			h.log.Error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏", zap.Error(err))
			return err
		}
	case "/delete_model":
		err := h.service.SetUserState(userID, defs.WaitingDeleteModelName)
		if err != nil {
			h.log.Error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏", zap.Error(err))
			return err
		}
	default:
		h.log.Warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ GetModelName", zap.String("command", command))
		return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
	}

	return c.Send("–í–≤–µ–¥–∏ –∏–º—è –º–æ–¥–µ–ª–∏:")
}

func (h *Handler) GetUserModels(c telebot.Context) error {
	userID := c.Sender().ID
	h.log.Info("GetUserModels called", zap.Int64("userID", userID))

	models, err := h.service.GetUserModels(userID)
	if err != nil {
		h.log.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π", zap.Error(err))
		_ = c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π.")
		return err
	}
	if len(models) == 0 {
		return c.Send("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.")
	}

	markup := &telebot.ReplyMarkup{}
	rows := make([]telebot.Row, 0, len(models))

	for _, name := range models {
		btn := markup.Data(name, "choose_model", name)
		rows = append(rows, markup.Row(btn))
	}
	markup.Inline(rows...)

	h.log.Info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", zap.Int64("userID", userID))
	return c.Send("–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:", markup)
}

func (h *Handler) OnChooseModel(c telebot.Context) error {
	userID := c.Sender().ID
	data := strings.Split(c.Callback().Data, "|")
	if len(data) < 2 {
		h.log.Warn("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö", zap.String("data", c.Callback().Data))
		return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏.")
	}
	modelName := data[1]

	err := h.service.SetPendingModel(userID, modelName)
	if err != nil {
		h.log.Error("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏", zap.Error(err))
		return c.Send("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
	}

	err = c.Respond(&telebot.CallbackResponse{
		Text:      "–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: " + modelName,
		ShowAlert: false,
	})
	if err != nil {
		h.log.Error("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback", zap.Error(err))
		return err
	}

	h.log.Info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å", zap.String("modelName", modelName), zap.Int64("userID", userID))
	return c.Send("–ú–æ–¥–µ–ª—å \"" + modelName + "\" –≤—ã–±—Ä–∞–Ω–∞.")
}

func (h *Handler) Start(c telebot.Context) error {
	text := `–ü—Ä–∏–≤–µ—Ç! üëã

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ.

–í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:
  
/save_model ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥–æ–ª–æ—Å–æ–≤—É—é –º–æ–¥–µ–ª—å
/choose_model ‚Äî –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –µ—â—ë —Ä–∞–∑

‚ö° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç ‚Äî —è –æ–∑–≤—É—á—É –µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é!`
	return c.Send(text)
}

func EnsureVoiceNOTE(in []byte) (outBytes []byte, durationSec int, err error) {
	const ffprobeFmt = "default=noprint_wrappers=1:nokey=1"

	infoCmd := exec.Command("ffprobe",
		"-v", "error",
		"-select_streams", "a:0",
		"-show_entries", "stream=codec_name,channels,sample_rate",
		"-of", ffprobeFmt,
		"pipe:0",
	)
	infoCmd.Stdin = bytes.NewReader(in)
	infoOut, _ := infoCmd.Output()

	needRecode := true
	if len(infoOut) > 0 {
		fields := strings.Split(strings.TrimSpace(string(infoOut)), "\n")
		if len(fields) == 3 &&
			fields[0] == "opus" &&
			fields[1] == "1" &&
			fields[2] == "48000" {
			needRecode = false
		}
	}

	var ogg bytes.Buffer
	if !needRecode {
		ogg.Write(in)
	} else {
		ff := exec.Command("ffmpeg",
			"-loglevel", "error",
			"-i", "pipe:0",
			"-c:a", "libopus",
			"-application", "voip",
			"-b:a", "64k",
			"-ac", "1",
			"-ar", "48000",
			"-f", "ogg",
			"pipe:1",
		)
		ff.Stdin = bytes.NewReader(in)
		ff.Stdout = &ogg

		if err = ff.Run(); err != nil {
			return nil, 0, fmt.Errorf("ffmpeg recode: %w", err)
		}
	}

	pr := exec.Command("ffprobe",
		"-v", "error",
		"-show_entries", "format=duration",
		"-of", ffprobeFmt,
		"pipe:0",
	)
	pr.Stdin = bytes.NewReader(ogg.Bytes())

	durOut, err := pr.Output()
	if err != nil {
		return nil, 0, errors.New("ffprobe: " + err.Error())
	}
	dur, _ := strconv.ParseFloat(strings.TrimSpace(string(durOut)), 64)

	return ogg.Bytes(), int(dur + 0.5), nil
}
